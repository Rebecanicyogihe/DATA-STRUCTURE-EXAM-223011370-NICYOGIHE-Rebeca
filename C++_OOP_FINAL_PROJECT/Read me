An abstract base class MatrixOp defines a pure virtual method execute() to enforce consistent interface for operations.

Three concrete classes were derived:

AddMatrixOp: Performs matrix addition.

MulMatrixOp: Performs matrix multiplication.

InverseMatrixOp: Computes the inverse of a 2x2 matrix.

Matrices are created dynamically using helper functions allocateMatrix() and freeMatrix().

Operations are tested on sample matrices A and B, and the results are printed using printMatrix().

All dynamically allocated memory is freed at the end to prevent memory leaks.
#include <iostream>   // for input and output
#include <iomanip>    // for formatting output
using namespace std;  // use standard C++ names

// Abstract base class for matrix operations
class MatrixOp {
public:
    virtual double** execute(double** A, double** B, int r1, int c1, int r2, int c2) = 0; // pure virtual function
    virtual ~MatrixOp() {} // virtual destructor
};

// Create a matrix with given rows and columns
double** allocateMatrix(int rows, int cols) {
    double** mat = new double*[rows]; // create row pointers
    for (int i = 0; i < rows; i++) {
        mat[i] = new double[cols];    // create each row
    }
    return mat; // return matrix
}

// Free the memory of a matrix
void freeMatrix(double** mat, int rows) {
    for (int i = 0; i < rows; i++) {
        delete[] mat[i]; // delete each row
    }
    delete[] mat; // delete row pointers
}

// Print the matrix
void printMatrix(double** mat, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cout << setw(10) << mat[i][j] << " "; // print value with space
        }
        cout << endl; // next row
    }
}

// Class for adding two matrices
class AddMatrixOp : public MatrixOp {
public:
    double** execute(double** A, double** B, int r1, int c1, int r2, int c2) {
        if (r1 != r2 || c1 != c2) { // check size match
            cout << "Matrix dimensions must match for addition.\n";
            return NULL;
        }
        double** result = allocateMatrix(r1, c1); // create result matrix
        for (int i = 0; i < r1; i++) {
            for (int j = 0; j < c1; j++) {
                result[i][j] = A[i][j] + B[i][j]; // add elements
            }
        }
        return result; // return result
    }
};

// Class for multiplying two matrices
class MulMatrixOp : public MatrixOp {
public:
    double** execute(double** A, double** B, int r1, int c1, int r2, int c2) {
        if (c1 != r2) { // check multiplication rule
            cout << "Matrix A columns must match Matrix B rows for multiplication.\n";
            return NULL;
        }
        double** result = allocateMatrix(r1, c2); // create result matrix
        for (int i = 0; i < r1; i++) {
            for (int j = 0; j < c2; j++) {
                result[i][j] = 0; // start with 0
                for (int k = 0; k < c1; k++) {
                    result[i][j] += A[i][k] * B[k][j]; // multiply and add
                }
            }
        }
        return result; // return result
    }
};

// Class to find inverse of 2x2 matrix
class InverseMatrixOp : public MatrixOp {
public:
    double** execute(double** A, double**, int r1, int c1, int, int) {
        if (r1 != 2 || c1 != 2) { // check for 2x2
            cout << "Inverse implemented for 2x2 matrix only.\n";
            return NULL;
        }
        double det = A[0][0]*A[1][1] - A[0][1]*A[1][0]; // find determinant
        if (det == 0) { // check if invertible
            cout << "Matrix is singular and cannot be inverted.\n";
            return NULL;
        }
        double** inv = allocateMatrix(2, 2); // create inverse matrix
        inv[0][0] =  A[1][1] / det;
        inv[0][1] = -A[0][1] / det;
        inv[1][0] = -A[1][0] / det;
        inv[1][1] =  A[0][0] / det;
        return inv; // return inverse
    }
};

// Main program starts here
int main() {
    int r1 = 2, c1 = 2; // size of A
    int r2 = 2, c2 = 2; // size of B

    // Create matrix A and fill it
    double** A = allocateMatrix(r1, c1);
    A[0][0] = 4; A[0][1] = 7;
    A[1][0] = 2; A[1][1] = 6;

    // Create matrix B and fill it
    double** B = allocateMatrix(r2, c2);
    B[0][0] = 1; B[0][1] = 0;
    B[1][0] = 5; B[1][1] = 1;

    cout << "Matrix A:\n";
    printMatrix(A, r1, c1); // print A

    cout << "\nMatrix B:\n";
    printMatrix(B, r2, c2); // print B

    // Create array of operation objects
    MatrixOp** ops = new MatrixOp*[3];
    ops[0] = new AddMatrixOp(); // addition object
    ops[1] = new MulMatrixOp(); // multiplication object
    ops[2] = new InverseMatrixOp(); // inverse object

    // Perform and print addition
    cout << "\n--- Addition A + B ---\n";
    double** addResult = ops[0]->execute(A, B, r1, c1, r2, c2);
    if (addResult) {
        printMatrix(addResult, r1, c1);
        freeMatrix(addResult, r1); // free result
    }

    // Perform and print multiplication
    cout << "\n--- Multiplication A * B ---\n";
    double** mulResult = ops[1]->execute(A, B, r1, c1, r2, c2);
    if (mulResult) {
        printMatrix(mulResult, r1, c2);
        freeMatrix(mulResult, r1); // free result
    }

    // Perform and print inverse
    cout << "\n--- Inverse of A ---\n";
    double** invResult = ops[2]->execute(A, NULL, r1, c1, 0, 0);
    if (invResult) {
        printMatrix(invResult, 2, 2);
        freeMatrix(invResult, 2); // free result
    }

    // Delete operation objects
    for (int i = 0; i < 3; i++) {
        delete ops[i];
    }
    delete[] ops; // delete ops array

    // Free input matrices
    freeMatrix(A, r1);
    freeMatrix(B, r2);

    return 0; // program ends
}


